// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ScoutApi.Data;

#nullable disable

namespace ScoutApi.Migrations
{
    [DbContext(typeof(ScoutApiContext))]
    [Migration("20250712140014_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.7");

            modelBuilder.Entity("GuardianScout", b =>
                {
                    b.Property<Guid>("GuardiansId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ScoutsId")
                        .HasColumnType("TEXT");

                    b.HasKey("GuardiansId", "ScoutsId");

                    b.HasIndex("ScoutsId");

                    b.ToTable("GuardianScouts", (string)null);
                });

            modelBuilder.Entity("ScoutApi.Entities.Award", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Awards");

                    b.HasDiscriminator().HasValue("Award");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("ScoutApi.Entities.EarnedAward", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AwardId")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("DateEarned")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ScoutId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AwardId");

                    b.HasIndex("ScoutId");

                    b.ToTable("EarnedAwards");
                });

            modelBuilder.Entity("ScoutApi.Entities.EarnedRank", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("DateEarned")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RankId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ScoutId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RankId");

                    b.HasIndex("ScoutId");

                    b.ToTable("EarnedRanks");
                });

            modelBuilder.Entity("ScoutApi.Entities.Guardian", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPrimaryGuardian")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Guardians");
                });

            modelBuilder.Entity("ScoutApi.Entities.Scout", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Scouts");
                });

            modelBuilder.Entity("ScoutApi.Entities.Rank", b =>
                {
                    b.HasBaseType("ScoutApi.Entities.Award");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("Rank");
                });

            modelBuilder.Entity("GuardianScout", b =>
                {
                    b.HasOne("ScoutApi.Entities.Guardian", null)
                        .WithMany()
                        .HasForeignKey("GuardiansId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScoutApi.Entities.Scout", null)
                        .WithMany()
                        .HasForeignKey("ScoutsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ScoutApi.Entities.EarnedAward", b =>
                {
                    b.HasOne("ScoutApi.Entities.Award", "Award")
                        .WithMany("EarnedAwards")
                        .HasForeignKey("AwardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScoutApi.Entities.Scout", "Scout")
                        .WithMany("EarnedAwards")
                        .HasForeignKey("ScoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Award");

                    b.Navigation("Scout");
                });

            modelBuilder.Entity("ScoutApi.Entities.EarnedRank", b =>
                {
                    b.HasOne("ScoutApi.Entities.Rank", "Rank")
                        .WithMany("EarnedRanks")
                        .HasForeignKey("RankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScoutApi.Entities.Scout", "Scout")
                        .WithMany("EarnedRanks")
                        .HasForeignKey("ScoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rank");

                    b.Navigation("Scout");
                });

            modelBuilder.Entity("ScoutApi.Entities.Award", b =>
                {
                    b.Navigation("EarnedAwards");
                });

            modelBuilder.Entity("ScoutApi.Entities.Scout", b =>
                {
                    b.Navigation("EarnedAwards");

                    b.Navigation("EarnedRanks");
                });

            modelBuilder.Entity("ScoutApi.Entities.Rank", b =>
                {
                    b.Navigation("EarnedRanks");
                });
#pragma warning restore 612, 618
        }
    }
}
